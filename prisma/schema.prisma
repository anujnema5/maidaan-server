// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  fullName      String?
  username      String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  password      String?
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
  googleId      String?
  provider      String?
  phoneNumber   String?
  refreshToken  String?   @db.Text
  Bookings      Booking[]
  Account       Account?
}

model Account {
  id     String  @id @default(cuid())
  userId String  @unique
  avatar String?
  bio    String? @db.Text
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Turfcaptain {
  id            String    @id @default(cuid())
  fullName      String?
  username      String?
  email         String?   @unique
  emailVerified Boolean   @default(false)
  password      String?
  createdAt     DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(3)
  googleId      String?
  provider      String?
  phoneNumber   String?
  refreshToken  String?   @db.Text
  turfs         Turf[]
  bookings      Booking[]
}

model Turf {
  id            String       @id @default(cuid())
  name          String
  location      String
  capacity      Int
  pricePerHour  Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  turfImages    TurfImages[]
  Booking       Booking[]
  turfCaptainId String?
  turfCaptain   Turfcaptain? @relation(fields: [turfCaptainId], references: [id])
  published     Boolean @default(false)
}

model TurfImages {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  uploadedAt DateTime @default(now())
  turfId     String
  turf       Turf     @relation(fields: [turfId], references: [id])
}

enum PaymentMode {
  UPI
  COD
  DEBIT_CARD
  CREDIT_CARD
  BANK
  OTHER
}

enum Status {
  pending
  confirmed
  rejected
}

model Booking {
  id            String       @id @default(cuid())
  turfId        String
  userId        String
  turf          Turf         @relation(fields: [turfId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  bookingDate   DateTime     @db.Date
  startTime     DateTime     @db.Timetz(0)
  endTime       DateTime     @db.Timetz(0)
  slots         Int          @default(1) @db.SmallInt
  totalPlayer   Int          @db.SmallInt
  status        Status
  paymentMode   PaymentMode
  rating        Int          @db.SmallInt
  review        String       @db.Text
  bookingDoneAt DateTime     @db.Timestamptz(0)
  turfCaptainId String?
  turfCaptain   Turfcaptain? @relation(fields: [turfCaptainId], references: [id])
}
